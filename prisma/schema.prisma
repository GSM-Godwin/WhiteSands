datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum YesNo {
  YES
  NO
}

enum Status {
  PENDING
  PICKEDUP
  SHIPPED
  CUSTOMS
  WAREHOUSE
  DELIVERED
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            Int      @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole   @default(USER)
  accounts      Account[]
  isTwoFactorEnabled  Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  address       String?
  post          String?
  phone         String?
}

model Account {
  id                 String  @id @default(cuid())
  image              String?
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id  String  @id @default(cuid())
  email String
  token String  @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id  String  @id @default(cuid())
  email String
  token String  @unique
  expires DateTime

  @@unique([email, token])  
}

model TwoFactorToken {
  id  String  @id @default(cuid())
  email String
  token String  @unique
  expires DateTime

  @@unique([email, token])  
}

model TwoFactorConfirmation {
  id  String  @id @default(cuid())

  userId  Int
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}

model Post {
  id String @id
  name    String
  phone   String
  weight  String
  height  String
  length  String
  width   String
  numberOfItems     String
  pickupLocation    String
  dropoffLocation   String
  isDangerousGoods    YesNo
  isLiveAnimals       YesNo
  isHumanRemains      YesNo
  status  Status
  price   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}